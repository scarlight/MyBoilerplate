// http://stackoverflow.com/questions/20541306/how-to-write-a-css-hack-for-ie-11
// http://browserstrangeness.bitbucket.org/css_hacks.html
// http://css-tricks.com/snippets/css/style-placeholder-text/
// It seems over clicking will highlight the label text. Disable text selection. Refer:http://stackoverflow.com/questions/826782/css-rule-to-disable-text-selection-highlighting
// styling placeholders refer: http://css-tricks.com/snippets/css/style-placeholder-text/

// #wrap adds useful namespace that is easy to remember, and is organized
#wrap {
    .default(@position:relative, @display:block) {
        position:@position;
        display:@display;
    }
    .void() {
        display:block; // useful to have when elements just need a void
        margin:0;
        padding:0;
        border:0;
        outline:0;
    }
}

.oilpaper(@filename:"index.png") {
    @path:"../_/project-psd-source/oilpaper/";
    @file:@filename;
    @url:"@{path}@{file}";
    background: transparent url(@url) no-repeat center 0 scroll;
}

// 1) extend can be used to reduce css file size by copying all of the properties into a selector
// 2) you must DECLARE THE CSS RULE if calling directly to use in extend,
// 3) we know a mixin function does not immediately DECLARE CSS RULE, sadly if called directly into extend it wont work
//    Reference: http://lesscss.org/features/#extend-feature-reducing-css-size;
// 4) On the contrary, you can have mixins inside your DECLARED RULE (workaround)
.relative { position: relative; #wrap > .void();     }
.absolute { position: absolute; &:extend(.relative); }
.reset    { :extend(.relative);                      } // DEPRECATED: fallback for older less configuration
.fixed    { position: fixed; &:extend(.relative);    }
.center   { margin: 0px auto;                        }
.clear    { clear:both;                              }
.show     { display:block !important;                }
.hide     { display:none;                            }
.void     { #wrap > .void();                         }
.bg-off   { background:none;                         }
.floatl   { float:left;                              }
.floatr   { float:right;                             }
.floatn   { float:none;                              }

// USE BACK TEXT-"ALIGNMENT" IN BOOTSTRAP TYPE.LESS. FYI it comes without"display:block;"" property

// LESS:  Referencing parent selectors with '&'
// USAGE: use align'direction' because its used the same in wordpress css
img
{
    &.alignleft
    {
        &:extend(.show, .floatl);
    }
    &.alignright
    {
        &:extend(.show, .floatr);
    }
    &.aligncenter
    {
        &:extend(.show, .center);
    }
}

// Changing selector order
// Reference: http://lesscss.org/features/#parent-selectors-feature-changing-selector-order
.plain {
    ul&
    {
        list-style:none;
        #wrap > .void();
    }
    ol&
    {
        &:extend(ul.plain); // Extending nested Selectors - http://lesscss.org/features/#extend-feature-extending-nested-selectors
    }
}
ul.plain-menu
{
    &:extend(ul.plain);
    li
    {
        &:extend(.relative);
        display:inline-block;
        width:auto;
        height:auto;
        padding:3px 10px;

        &:before
        {
            &:extend(.absolute);
            display:inline-block;
            content:"|";
            top:2px;
            right:-5px;
        }

        *
        {
            font-size:inherit;
        }
    }
    li:last-child
    {
        &:before
        {
            display:none;
        }
    }
}

// http://www.minimit.com/articles/solutions-tutorials/bootstrap-3-responsive-centered-columns

/* centered columns styles */
.row-centered {
    text-align:center;
}
.col-centered {
    display:inline-block; /* divs work like text when displayed as inline-block */
    float:none;
    text-align:left; /* reset the text-align */
    margin-right:-4px; /* inline-block space fix */
}

p.linespace { margin-bottom:0; }
.generate-p-linespace(10); //total number of loops
.generate-p-linespace(@n, @i: 1) when (@i =< @n) { // the loop
    p.linespace@{i}0 {
        margin-bottom: (@i * 100px / @n);
    }
    .generate-p-linespace(@n, (@i + 1)); // increment loop
}

.space
{
    &-top    { margin-top:20px !important; }
    &-right  { margin-right:20px !important; }
    &-bottom { margin-bottom:20px !important; }
    &-left   { margin-left:20px !important; }
}

.padding
{
    &-0  { padding:0 !important;    }
    &-5  { padding:5px !important;  }
    &-10 { padding:10px !important; }
    &-15 { padding:15px !important; }
    &-20 { padding:20px !important; }
    &-25 { padding:25px !important; }
    &-30 { padding:30px !important; }
    &-35 { padding:35px !important; }
    &-40 { padding:40px !important; }
}


.padding-left
{
    &-0  { padding-left:0 !important;    }
    &-5  { padding-left:5px !important;  }
    &-10 { padding-left:10px !important; }
    &-15 { padding-left:15px !important; }
    &-20 { padding-left:20px !important; }
    &-25 { padding-left:25px !important; }
    &-30 { padding-left:30px !important; }
    &-35 { padding-left:35px !important; }
    &-40 { padding-left:40px !important; }
}

.padding-right
{
    &-0  { padding-right:0 !important;    }
    &-5  { padding-right:5px !important;  }
    &-10 { padding-right:10px !important; }
    &-15 { padding-right:15px !important; }
    &-20 { padding-right:20px !important; }
    &-25 { padding-right:25px !important; }
    &-30 { padding-right:30px !important; }
    &-35 { padding-right:35px !important; }
    &-40 { padding-right:40px !important; }
}

.padding-top
{
    &-0  { padding-top:0 !important;    }
    &-5  { padding-top:5px !important;  }
    &-10 { padding-top:10px !important; }
    &-15 { padding-top:15px !important; }
    &-20 { padding-top:20px !important; }
    &-25 { padding-top:25px !important; }
    &-30 { padding-top:30px !important; }
    &-35 { padding-top:35px !important; }
    &-40 { padding-top:40px !important; }
}

.padding-bottom
{
    &-0  { padding-bottom:0 !important;    }
    &-5  { padding-bottom:5px !important;  }
    &-10 { padding-bottom:10px !important; }
    &-15 { padding-bottom:15px !important; }
    &-20 { padding-bottom:20px !important; }
    &-25 { padding-bottom:25px !important; }
    &-30 { padding-bottom:30px !important; }
    &-35 { padding-bottom:35px !important; }
    &-40 { padding-bottom:40px !important; }
}


.margin
{
    &-0  { margin:0 !important;    }
    &-5  { margin:5px !important;  }
    &-10 { margin:10px !important; }
    &-15 { margin:15px !important; }
    &-20 { margin:20px !important; }
    &-25 { margin:25px !important; }
    &-30 { margin:30px !important; }
    &-35 { margin:35px !important; }
    &-40 { margin:40px !important; }
}

.margin-left
{
    &-0  { margin-left:0 !important;    }
    &-5  { margin-left:5px !important;  }
    &-10 { margin-left:10px !important; }
    &-15 { margin-left:15px !important; }
    &-20 { margin-left:20px !important; }
    &-25 { margin-left:25px !important; }
    &-30 { margin-left:30px !important; }
    &-35 { margin-left:35px !important; }
    &-40 { margin-left:40px !important; }
}

.margin-right
{
    &-0  { margin-right:0 !important;    }
    &-5  { margin-right:5px !important;  }
    &-10 { margin-right:10px !important; }
    &-15 { margin-right:15px !important; }
    &-20 { margin-right:20px !important; }
    &-25 { margin-right:25px !important; }
    &-30 { margin-right:30px !important; }
    &-35 { margin-right:35px !important; }
    &-40 { margin-right:40px !important; }
}

.margin-top
{
    &-0  { margin-top:0 !important;    }
    &-5  { margin-top:5px !important;  }
    &-10 { margin-top:10px !important; }
    &-15 { margin-top:15px !important; }
    &-20 { margin-top:20px !important; }
    &-25 { margin-top:25px !important; }
    &-30 { margin-top:30px !important; }
    &-35 { margin-top:35px !important; }
    &-40 { margin-top:40px !important; }
}

.margin-bottom
{
    &-0  { margin-bottom:0 !important;    }
    &-5  { margin-bottom:5px !important;  }
    &-10 { margin-bottom:10px !important; }
    &-15 { margin-bottom:15px !important; }
    &-20 { margin-bottom:20px !important; }
    &-25 { margin-bottom:25px !important; }
    &-30 { margin-bottom:30px !important; }
    &-35 { margin-bottom:35px !important; }
    &-40 { margin-bottom:40px !important; }
}

.font-xs {
    font-size: 85% !important;
}

.font-sm {
    font-size: 95% !important;
}

.font-md {
    font-size: 130% !important;
}

.font-lg {
    font-size: 160% !important;
}

.font-xl {
    font-size: 200% !important;
}

//pending: form-mixin //list-mixin
/*

GOAL: we want the selectors benefit from extend feature such as rule combinator and clean code
Concerns: Cascading may not work since selectors are grouped in an unknown stack order

STEPS:
COMMON GROUND RULE is extend .relative. (&:extend(.relative);)

CONTINUE USING:
&:extend(.center); // .center may not work if subsequent margin left or right property is specified. Margin for top and bottom will not interfere.
&:extend(.floatl);
&:extend(.floatr);
display:type; use this within the corresponding selector since there is too many types available
------------------------------------------------------------------------------------------------

OLD PROBLEMS
--------
#wrap > .vabsolute();              // SOLVED: no more rules repeating within this selector
#wrap > .vabsolute(inline-block);  // SOLVED: no more rules repeating within this selector even when there is variation
#wrap > .vrelative();              // SOLVED: no more rules repeating within this selector
#wrap > .vrelative(inline-block);  // SOLVED: no more rules repeating within this selector even when there is variation

position:fixed; // Can handle also

*/
